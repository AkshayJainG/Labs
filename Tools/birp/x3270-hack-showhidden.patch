diff --git lib/3270/macros.c lib/3270/macros.c
index 7cd1ab8..9c707c0 100644
--- lib/3270/macros.c
+++ lib/3270/macros.c
@@ -2205,8 +2205,8 @@ dump_range(int first, int len, bool in_ascii, struct ea *buf,
 	    if (buf[first + i].fa) {
 		is_zero = FA_IS_ZERO(buf[first + i].fa);
 		vb_appends(&r, " ");
-	    } else if (is_zero) {
-		vb_appends(&r, " ");
+	   // } else if (is_zero) {
+		//vb_appends(&r, " ");
 	    } else if (IS_LEFT(ctlr_dbcs_state(first + i))) {
 		xlen = ebcdic_to_multibyte(
 			(buf[first + i].cc << 8) | buf[first + i + 1].cc,
diff --git x3270/screen.c x3270/screen.c
index adbb4a9..ce2ab60 100644
--- x3270/screen.c
+++ x3270/screen.c
@@ -2424,9 +2424,9 @@ draw_fields(union sp *buffer, int first, int last)
 			bool is_vc = false;
 
 			/* Find the right graphic rendition. */
-			if (zero) {
+			//if (zero) {
 			    	gr = 0;
-			} else {
+			//} else {
 				gr = sbp->gr;
 				if (!gr)
 					gr = field_ea->gr;
@@ -2434,12 +2434,12 @@ draw_fields(union sp *buffer, int first, int last)
 					any_blink = true;
 				if (appres.highlight_bold && FA_IS_HIGH(fa))
 					gr |= GR_INTENSIFY;
-			}
+			//}
 
 			/* Find the right color. */
-			if (zero) {
-			    	e_color = fa_color(FA_INT_HIGH_SEL);
-			} else {
+			//if (zero) {
+			//    	e_color = fa_color(FA_INT_HIGH_SEL);
+			//} else {
 				if (sbp->fg)
 					e_color = sbp->fg & COLOR_MASK;
 				else if (appres.interactive.mono &&
@@ -2452,16 +2452,20 @@ draw_fields(union sp *buffer, int first, int last)
 					e_color = INVERT_COLOR(e_color);
 					reverse = true;
 				}
-			}
+			//}
+            if (zero) {
+               e_color = INVERT_COLOR(e_color);
+               reverse = True;
+            }
 			if (!appres.interactive.mono)
 				b.bits.fg = e_color;
 
 			/* Find the right character and character set. */
 			d = ctlr_dbcs_state(baddr);
-			if (zero) {
+			//if (zero) {
 				if (visible_control)
 					b.bits.cc = EBC_space;
-			} else if (((!visible_control || c != EBC_null) &&
+			if (((!visible_control || c != EBC_null) &&
 				    (c != EBC_space || d != DBCS_NONE)) ||
 			           (gr & (GR_REVERSE | GR_UNDERLINE)) ||
 				   visible_control) {
@@ -2736,13 +2740,13 @@ char_color(int baddr)
 	/*
 	 * For non-display fields, we ignore gr and fg.
 	 */
-	if (FA_IS_ZERO(fa)) {
-		color = fa_color(fa);
-		if (appres.interactive.mono && SELECTED(baddr)) {
-			color = INVERT_COLOR(color);
-		}
-		return color;
-	}
+	//if (FA_IS_ZERO(fa)) {
+	//	color = fa_color(fa);
+	//	if (appres.interactive.mono && SELECTED(baddr)) {
+	//		color = INVERT_COLOR(color);
+	//	}
+	//	return color;
+	//}
 
 	/*
 	 * Find the color of the character or the field.
@@ -2864,13 +2868,13 @@ redraw_char(int baddr, bool invert)
 	if (d == DBCS_LEFT || d == DBCS_RIGHT)
 		buffer[0].bits.cs = CS_DBCS;
 	fa = ea_buf[faddr].fa;
-	if (FA_IS_ZERO(fa)) {
-		gr = 0;
-	} else {
+	//if (FA_IS_ZERO(fa)) {
+	//	gr = 0;
+	//} else {
 		gr = ea_buf[baddr].gr;
 		if (!gr)
 			gr = fa2ea(faddr)->gr;
-	}
+	//}
 	if (ea_buf[baddr].fa) {
 		if (!visible_control)
 			blank_it = 1;
@@ -3541,11 +3545,11 @@ fa_color(unsigned char fa)
 	/*
 	 * Color indices are the intensity bits (0 through 2)
 	 */
-	if (FA_IS_ZERO(fa) || (appres.modified_sel && FA_IS_MODIFIED(fa))) {
-	    return GC_NONDEFAULT | FA_INT_NORM_SEL;
-	} else {
+	//if (FA_IS_ZERO(fa) || (appres.modified_sel && FA_IS_MODIFIED(fa))) {
+	//    return GC_NONDEFAULT | FA_INT_NORM_SEL;
+	//} else {
 	    return GC_NONDEFAULT | (fa & 0x0c);
-	}
+	//}
     }
 }
 
diff --git x3270/select.c x3270/select.c
index 4753e0c..3b4a3b9 100644
--- x3270/select.c
+++ x3270/select.c
@@ -235,18 +235,18 @@ select_word(int baddr, Time t)
 	int class;
 
 	/* Find the initial character class */
-	if (FA_IS_ZERO(fa))
-		ch = EBC_space;
-	else
+	//if (FA_IS_ZERO(fa))
+	//	ch = EBC_space;
+	//else
 		ch = ea_buf[baddr].cc;
 	class = char_class[ebc2asc0[ch]];
 
 	/* Find the beginning */
 	for (f_start = baddr; f_start % COLS; f_start--) {
 		fa = get_field_attribute(f_start);
-		if (FA_IS_ZERO(fa))
-			ch = EBC_space;
-		else
+		//if (FA_IS_ZERO(fa))
+		//	ch = EBC_space;
+		//else
 			ch = ea_buf[f_start].cc;
 		if (char_class[ebc2asc0[ch]] != class) {
 			f_start++;
@@ -257,9 +257,9 @@ select_word(int baddr, Time t)
 	/* Find the end */
 	for (f_end = baddr; (f_end+1) % COLS; f_end++) {
 		fa = get_field_attribute(f_end);
-		if (FA_IS_ZERO(fa))
-			ch = EBC_space;
-		else
+		//if (FA_IS_ZERO(fa))
+		//	ch = EBC_space;
+		//else
 			ch = ea_buf[f_end].cc;
 		if (char_class[ebc2asc0[ch]] != class) {
 			f_end--;
@@ -1314,10 +1314,10 @@ onscreen_char(int baddr, unsigned char *r, int *rlen)
 	}
 
 	/* If it isn't visible, then make it a blank. */
-	if (FA_IS_ZERO(fa)) {
-		*r = ' ';
-		return;
-	}
+	//if (FA_IS_ZERO(fa)) {
+	//	*r = ' ';
+	//	return;
+	//}
 
 	/* Handle DBCS. */
 	switch (ctlr_dbcs_state(baddr)) {
