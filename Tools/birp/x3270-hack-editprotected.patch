diff --git lib/3270/ctlr.c lib/3270/ctlr.c
index d45beb9..38221b5 100644
--- lib/3270/ctlr.c
+++ lib/3270/ctlr.c
@@ -474,7 +474,7 @@ next_unprotected(int baddr0)
 		baddr = nbaddr;
 		INC_BA(nbaddr);
 		if (ea_buf[baddr].fa &&
-		    !FA_IS_PROTECTED(ea_buf[baddr].fa) &&
+		    //!FA_IS_PROTECTED(ea_buf[baddr].fa) &&
 		    !ea_buf[nbaddr].fa)
 			return nbaddr;
 	} while (nbaddr != baddr0);
@@ -1171,7 +1171,7 @@ ctlr_erase_all_unprotected(void)
 		f = false;
 		do {
 			fa = ea_buf[baddr].fa;
-			if (!FA_IS_PROTECTED(fa)) {
+			//if (!FA_IS_PROTECTED(fa)) {
 				mdt_clear(baddr);
 				do {
 					INC_BA(baddr);
@@ -1183,12 +1183,12 @@ ctlr_erase_all_unprotected(void)
 						ctlr_add(baddr, EBC_null, 0);
 					}
 				} while (!ea_buf[baddr].fa);
-			}
-			else {
-				do {
-					INC_BA(baddr);
-				} while (!ea_buf[baddr].fa);
-			}
+			//}
+			//else {
+			//	do {
+			//		INC_BA(baddr);
+			//	} while (!ea_buf[baddr].fa);
+			//}
 		} while (baddr != sbaddr);
 		if (!f)
 			cursor_move(0);
@@ -1356,8 +1356,9 @@ ctlr_write(unsigned char buf[], int buflen, bool erase)
 			 * of an unprotected field, simply advance one
 			 * position.
 			 */
-			if (ea_buf[buffer_addr].fa &&
-			    !FA_IS_PROTECTED(ea_buf[buffer_addr].fa)) {
+			//if (ea_buf[buffer_addr].fa &&
+			//    !FA_IS_PROTECTED(ea_buf[buffer_addr].fa)) {
+			if (ea_buf[buffer_addr].fa) {
 				INC_BA(buffer_addr);
 				last_zpt = false;
 				last_cmd = true;
@@ -1519,7 +1520,8 @@ ctlr_write(unsigned char buf[], int buflen, bool erase)
 			do {
 				if (ea_buf[buffer_addr].fa)
 					current_fa = ea_buf[buffer_addr].fa;
-				else if (!FA_IS_PROTECTED(current_fa)) {
+				//else if (!FA_IS_PROTECTED(current_fa)) {
+				else {
 					ctlr_add(buffer_addr, EBC_null,
 					    CS_BASE);
 				}
diff --git lib/3270/fprint_screen.c lib/3270/fprint_screen.c
index 44b4910..ed59945 100644
--- lib/3270/fprint_screen.c
+++ lib/3270/fprint_screen.c
@@ -79,7 +79,8 @@ color_from_fa(unsigned char fa)
 		HOST_COLOR_BLUE,         /* protected */
 		HOST_COLOR_WHITE         /* protected, intensified */
 #       define DEFCOLOR_MAP(f) \
-		((((f) & FA_PROTECT) >> 4) | (((f) & FA_INT_HIGH_SEL) >> 3))
+			(((f) & FA_INT_HIGH_SEL) >> 3)
+			//((((f) & FA_PROTECT) >> 4) | (((f) & FA_INT_HIGH_SEL) >> 3))
 	};
 
 	if (appres.m3279)
diff --git lib/3270/kybd.c lib/3270/kybd.c
index 81aefe0..32da414 100644
--- lib/3270/kybd.c
+++ lib/3270/kybd.c
@@ -994,20 +994,20 @@ key_Character(unsigned ebc, bool with_ge, bool pasting)
 	    auto_skip = false;
 	}
 
-	if (ea_buf[baddr].fa || FA_IS_PROTECTED(fa)) {
-	    if (!auto_skip) {
+	//if (ea_buf[baddr].fa || FA_IS_PROTECTED(fa)) {
+	//    if (!auto_skip) {
 		/*
 		 * In overlay-paste mode, protected fields cause paste buffer
 		 * data to be dropped while moving the cursor right.
 		 */
-		INC_BA(baddr);
-		cursor_move(baddr);
-		return true;
-	    } else {
-		operator_error(KL_OERR_PROTECTED);
-		return false;
-	    }
-	}
+	//	INC_BA(baddr);
+	//	cursor_move(baddr);
+	//	return true;
+	//    } else {
+	//	operator_error(KL_OERR_PROTECTED);
+	//	return false;
+	//    }
+	//}
 	if (appres.numeric_lock && FA_IS_NUMERIC(fa) &&
 	    !((ebc >= EBC_0 && ebc <= EBC_9) ||
 	      ebc == EBC_minus || ebc == EBC_period)) {
@@ -1280,10 +1280,10 @@ key_WCharacter(unsigned char ebc_pair[])
 	faddr = find_field_attribute(baddr);
 
 	/* Protected? */
-	if (ea_buf[baddr].fa || FA_IS_PROTECTED(fa)) {
-		operator_error(KL_OERR_PROTECTED);
-		return false;
-	}
+	//if (ea_buf[baddr].fa || FA_IS_PROTECTED(fa)) {
+	//	operator_error(KL_OERR_PROTECTED);
+	//	return false;
+	//}
 
 	/* Numeric? */
 	if (appres.numeric_lock && FA_IS_NUMERIC(fa)) {
@@ -1738,7 +1738,7 @@ BackTab_action(ia_t ia, unsigned argc, const char **argv)
 	nbaddr = baddr;
 	INC_BA(nbaddr);
 	if (ea_buf[baddr].fa &&
-	    !FA_IS_PROTECTED(ea_buf[baddr].fa) &&
+	    //!FA_IS_PROTECTED(ea_buf[baddr].fa) &&
 	    !ea_buf[nbaddr].fa) {
 	    break;
 	}
@@ -1951,10 +1951,10 @@ do_delete(void)
 
 	/* Can't delete a field attribute. */
 	fa = get_field_attribute(baddr);
-	if (FA_IS_PROTECTED(fa) || ea_buf[baddr].fa) {
-		operator_error(KL_OERR_PROTECTED);
-		return false;
-	}
+	//if (FA_IS_PROTECTED(fa) || ea_buf[baddr].fa) {
+	//	operator_error(KL_OERR_PROTECTED);
+	//	return false;
+	//}
 	if (ea_buf[baddr].cc == EBC_so || ea_buf[baddr].cc == EBC_si) {
 		/*
 		 * Can't delete SO or SI, unless it's adjacent to its
@@ -2090,10 +2090,10 @@ do_erase(void)
 
 	baddr = cursor_addr;
 	faddr = find_field_attribute(baddr);
-	if (faddr == baddr || FA_IS_PROTECTED(ea_buf[baddr].fa)) {
-		operator_error(KL_OERR_PROTECTED);
-		return;
-	}
+	//if (faddr == baddr || FA_IS_PROTECTED(ea_buf[baddr].fa)) {
+	//	operator_error(KL_OERR_PROTECTED);
+	//	return;
+	//}
 	if (baddr && faddr == baddr - 1)
 		return;
 	do_left();
@@ -2275,7 +2275,7 @@ PreviousWord_action(ia_t ia, unsigned argc, const char **argv)
     prot = FA_IS_PROTECTED(get_field_attribute(baddr));
 
     /* Skip to before this word, if in one now. */
-    if (!prot) {
+   // if (!prot) {
 	c = ea_buf[baddr].cc;
 	while (!ea_buf[baddr].fa && c != EBC_space && c != EBC_null) {
 	    DEC_BA(baddr);
@@ -2284,7 +2284,7 @@ PreviousWord_action(ia_t ia, unsigned argc, const char **argv)
 	    }
 	    c = ea_buf[baddr].cc;
 	}
-    }
+   // }
     baddr0 = baddr;
 
     /* Find the end of the preceding word. */
@@ -2375,7 +2375,8 @@ nu_word(int baddr)
 		c = ea_buf[baddr].cc;
 		if (ea_buf[baddr].fa)
 			prot = FA_IS_PROTECTED(ea_buf[baddr].fa);
-		else if (!prot && c != EBC_space && c != EBC_null)
+		//else if (!prot && c != EBC_space && c != EBC_null)
+		else if (c != EBC_space && c != EBC_null)
 			return baddr;
 		INC_BA(baddr);
 	} while (baddr != baddr0);
@@ -2432,14 +2433,14 @@ NextWord_action(ia_t ia, unsigned argc, const char **argv)
     }
 
     /* If not in an unprotected field, go to the next unprotected word. */
-    if (ea_buf[cursor_addr].fa ||
-	FA_IS_PROTECTED(get_field_attribute(cursor_addr))) {
-	baddr = nu_word(cursor_addr);
-	if (baddr != -1) {
-	    cursor_move(baddr);
-	}
-	return true;
-    }
+   // if (ea_buf[cursor_addr].fa ||
+	//FA_IS_PROTECTED(get_field_attribute(cursor_addr))) {
+	//baddr = nu_word(cursor_addr);
+	//if (baddr != -1) {
+	//    cursor_move(baddr);
+	//}
+	//return true;
+   // }
 
     /* If there's another word in this field, go to it. */
     baddr = nt_word(cursor_addr);
@@ -2570,7 +2571,8 @@ Newline_action(ia_t ia, unsigned argc, const char **argv)
     baddr = (baddr / COLS) * COLS;			/* 1st col */
     faddr = find_field_attribute(baddr);
     fa = ea_buf[faddr].fa;
-    if (faddr != baddr && !FA_IS_PROTECTED(fa)) {
+    ///if (faddr != baddr && !FA_IS_PROTECTED(fa)) {
+	 if (faddr != baddr) {
 	cursor_move(baddr);
     } else {
 	cursor_move(next_unprotected(baddr));
@@ -2836,10 +2838,10 @@ EraseEOF_action(ia_t ia, unsigned argc, const char **argv)
     }
     baddr = cursor_addr;
     fa = get_field_attribute(baddr);
-    if (FA_IS_PROTECTED(fa) || ea_buf[baddr].fa) {
-	operator_error(KL_OERR_PROTECTED);
-	return false;
-    }
+    //if (FA_IS_PROTECTED(fa) || ea_buf[baddr].fa) {
+	//operator_error(KL_OERR_PROTECTED);
+	//return false;
+   // }
     if (formatted) {	/* erase to next field attribute */
 	do {
 	    ctlr_add(baddr, EBC_null, 0);
@@ -2904,7 +2906,7 @@ EraseInput_action(ia_t ia, unsigned argc, const char **argv)
 	f = false;
 	do {
 	    fa = ea_buf[baddr].fa;
-	    if (!FA_IS_PROTECTED(fa)) {
+	   // if (!FA_IS_PROTECTED(fa)) {
 		mdt_clear(baddr);
 		do {
 		    INC_BA(baddr);
@@ -2916,11 +2918,11 @@ EraseInput_action(ia_t ia, unsigned argc, const char **argv)
 			ctlr_add(baddr, EBC_null, 0);
 		    }
 		} while (!ea_buf[baddr].fa);
-	    } else {	/* skip protected */
-		do {
-		    INC_BA(baddr);
-		} while (!ea_buf[baddr].fa);
-	    }
+	    //} else {	/* skip protected */
+		//do {
+		//    INC_BA(baddr);
+		//} while (!ea_buf[baddr].fa);
+	   // }
 	} while (baddr != sbaddr);
 	if (!f) {
 	    cursor_move(0);
@@ -2971,10 +2973,10 @@ DeleteWord_action(ia_t ia, unsigned argc, const char **argv)
     fa = get_field_attribute(baddr);
 
     /* Make sure we're on a modifiable field. */
-    if (FA_IS_PROTECTED(fa) || ea_buf[baddr].fa) {
-	operator_error(KL_OERR_PROTECTED);
-	return false;
-    }
+   // if (FA_IS_PROTECTED(fa) || ea_buf[baddr].fa) {
+	//operator_error(KL_OERR_PROTECTED);
+	//return false;
+   //}
 
     /* Backspace over any spaces to the left of the cursor. */
     for (;;) {
@@ -3040,10 +3042,10 @@ DeleteField_action(ia_t ia, unsigned argc, const char **argv)
 
     baddr = cursor_addr;
     fa = get_field_attribute(baddr);
-    if (FA_IS_PROTECTED(fa) || ea_buf[baddr].fa) {
-	operator_error(KL_OERR_PROTECTED);
-	return false;
-    }
+   // if (FA_IS_PROTECTED(fa) || ea_buf[baddr].fa) {
+	//operator_error(KL_OERR_PROTECTED);
+	//return false;
+   // }
     while (!ea_buf[baddr].fa) {
 	DEC_BA(baddr);
     }
@@ -3160,9 +3162,9 @@ FieldEnd_action(ia_t ia, unsigned argc, const char **argv)
     baddr = cursor_addr;
     faddr = find_field_attribute(baddr);
     fa = ea_buf[faddr].fa;
-    if (faddr == baddr || FA_IS_PROTECTED(fa)) {
-	return true;
-    }
+   // if (faddr == baddr || FA_IS_PROTECTED(fa)) {
+	//return true;
+   // }
 
     baddr = faddr;
     while (true) {
@@ -3444,11 +3446,11 @@ remargin(int lmargin)
 		}
 		faddr = find_field_attribute(baddr);
 		fa = ea_buf[faddr].fa;
-		if (faddr == baddr || FA_IS_PROTECTED(fa)) {
-			baddr = next_unprotected(baddr);
-			if (baddr <= b0)
-				return false;
-		}
+		//if (faddr == baddr || FA_IS_PROTECTED(fa)) {
+		//	baddr = next_unprotected(baddr);
+		//	if (baddr <= b0)
+		//		return false;
+		//}
 	}
 
 	cursor_move(baddr);
@@ -4058,27 +4060,27 @@ kybd_prime(void)
 	}
 
 	fa = get_field_attribute(cursor_addr);
-	if (ea_buf[cursor_addr].fa || FA_IS_PROTECTED(fa)) {
+	//if (ea_buf[cursor_addr].fa || FA_IS_PROTECTED(fa)) {
 		/*
 		 * The cursor is not in an unprotected field.  Find the
 		 * next one.
 		 */
-		baddr = next_unprotected(cursor_addr);
+	//	baddr = next_unprotected(cursor_addr);
 
 		/* If there isn't any, give up. */
-		if (!baddr) {
-			return 0;
-		}
+	//	if (!baddr) {
+	//		return 0;
+	//	}
 
 		/* Move the cursor there. */
-	} else {
+	//} else {
 		/* Already in an unprotected field.  Find its start. */
 		baddr = cursor_addr;
 		while (!ea_buf[baddr].fa) {
 			DEC_BA(baddr);
 		}
 		INC_BA(baddr);
-	}
+	//}
 
 	/* Move the cursor to the beginning of the field. */
 	cursor_move(baddr);
diff --git lib/3270/macros.c lib/3270/macros.c
index 9c707c0..e05c96b 100644
--- lib/3270/macros.c
+++ lib/3270/macros.c
@@ -2611,11 +2611,11 @@ status_string(void)
 	unsigned char fa;
 
 	fa = get_field_attribute(cursor_addr);
-	if (FA_IS_PROTECTED(fa)) {
-	    prot_stat = 'P';
-	} else {
+	//if (FA_IS_PROTECTED(fa)) {
+	//    prot_stat = 'P';
+	//} else {
 	    prot_stat = 'U';
-	}
+	//}
     }
 
     if (CONNECTED) {
diff --git x3270/select.c x3270/select.c
index 3b4a3b9..192eaf0 100644
--- x3270/select.c
+++ x3270/select.c
@@ -863,7 +863,8 @@ Cut_xaction(Widget w _is_unused, XEvent *event, String *params,
     for (baddr = 0; baddr < ROWS*COLS; baddr++) {
 	if (ea_buf[baddr].fa) {
 	    fa = ea_buf[baddr].fa;
-	} else if ((IN_NVT || !FA_IS_PROTECTED(fa)) && screen_selected(baddr)) {
+	//} else if ((IN_NVT || !FA_IS_PROTECTED(fa)) && screen_selected(baddr)) {
+	} 	else if (IN_NVT && screen_selected(baddr))  {
 	    target[baddr/ULBS] |= 1L << (baddr%ULBS);
 	}
     }
